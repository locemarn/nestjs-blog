
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique @db.VarChar(100)
  username        String            @unique @db.VarChar(50)
  password        String            @db.VarChar(255)
  role            Role
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  deleted_at      DateTime?         @db.Timestamp(6)

  comments        Comment[]
  likes           Like[]
  posts           Post[]
  commentResponse CommentResponse[]

  @@map("users")
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String     @db.VarChar(255)
  content    String
  published  Boolean    @default(false)
  userId     Int
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  deleted_at DateTime?  @db.Timestamp(6)

  comments   Comment[]
  likes      Like[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[] @relation("CategoryToPost")
  tags       Tag[]      @relation("PostToTag")

  @@map("posts")
  @@index([published])
  @@index([userId])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(100)
  posts Post[] @relation("CategoryToPost")

  @@map("categories")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(50)
  posts Post[] @relation("PostToTag")

  @@map("tags")
}

model Comment {
  id         Int               @id @default(autoincrement())
  content    String
  postId     Int
  userId     Int
  created_at DateTime          @default(now()) @db.Timestamp(6)
  updated_at DateTime          @default(now()) @db.Timestamp(6)
  deleted_at DateTime?         @db.Timestamp(6)

  post       Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses  CommentResponse[]

  @@map("comments")
  @@index([postId])
  @@index([created_at])
}

model CommentResponse {
  id         Int      @id @default(autoincrement())
  content    String
  userId     Int
  commentId  Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comment_responses")
  @@index([commentId])
}

model Like {
  id         Int      @id @default(autoincrement())
  postId     Int
  userId     Int
  created_at DateTime @default(now()) @db.Timestamp(6)

  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}